# -*- coding: utf-8 -*-
"""Labelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lgvez912KxtR0MAcDYBiRNNByBAgu3v6
"""
import pandas as pd
from pyemd import emd
from gensim.models import Word2Vec
from .uob_init import (
    label_stop_words,
    label_checklist
)
# Import and download stopwords from NLTK.
# from nltk.corpus import stopwords
# from nltk import download
# download('stopwords')  # Download stopwords list.
# stop_words = stopwords.words('english')
# or custom stopwords
# stop_words = 'nan' 
# checklist = "checklist.txt"

# Pre-processing a document.
import nltk
from nltk import word_tokenize
# download('punkt')  # Download data for tokenizer.
try:
  nltk.data.find('tokenizers/punkt')
except LookupError:
  nltk.download('punkt')

def speaker_label_func(input, pretrained_model_path, checklist_path):
    def preprocess(doc):
        doc = str(doc).lower()  # Lower the text.
        doc = word_tokenize(doc)  # Split into words.
        doc = [w for w in doc if not w in label_stop_words]  # Remove stopwords.
        doc = [w for w in doc if w.isalpha()]  # Remove numbers and punctuation.
        return doc

    # load model
    wv_model = Word2Vec.load(pretrained_model_path)

    # load template
    with open(checklist_path + label_checklist, "r", encoding='UTF-8') as f:
        template = preprocess(f.read())

    # load data
    # input = pd.read_csv("output_3.csv")
    text0 = [w for l in input['text'][input['speaker_label'].astype(str).str.endswith('0')] for w in preprocess(l)]
    text1 = [w for l in input['text'][input['speaker_label'].astype(str).str.endswith('1')] for w in preprocess(l)]

    # Calculate similarity
    distance0 = wv_model.wv.wmdistance(text0, template)
    print('distance0 = %.10f' % distance0)
    distance1 = wv_model.wv.wmdistance(text1, template)
    print('distance1 = %.10f' % distance1)

    # identify
    if distance0 < distance1:
        input.loc[input['speaker_label'].astype(str).str.endswith('0'),'label'] = 'Agent'
        input.loc[input['speaker_label'].astype(str).str.endswith('1'),'label'] = 'Customer'
        print('speaker0 is Agent')
    elif distance0 > distance1:
        input.loc[input['speaker_label'].astype(str).str.endswith('1'),'label'] = 'Agent'
        input.loc[input['speaker_label'].astype(str).str.endswith('0'),'label'] = 'Customer'
        print('speaker1 is Agent')
    else:
        print('cannot identify')

    return(input)
